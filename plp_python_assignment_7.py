# -*- coding: utf-8 -*-
"""Plp_python assignment 7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DV8Ala9duxbhkBNXRwdVUmBZlA1czuP5
"""

# Install kagglehub
!pip install kagglehub --quiet

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import kagglehub

# Make plots look nicer
sns.set(style="whitegrid")

# Download dataset from KaggleHub
try:
    path = kagglehub.dataset_download("mlg-ulb/creditcardfraud")
    print("Dataset downloaded to:", path)

    # Load the CSV file (dataset is usually named 'creditcard.csv')
    df = pd.read_csv(f"{path}/creditcard.csv")

    # Task 1: Load and Explore the Dataset
    print("\nFirst 5 rows of the dataset:")
    display(df.head())

    print("\nData types:")
    print(df.dtypes)

    print("\nMissing values:")
    print(df.isnull().sum())

    # Clean dataset (drop or fill missing values if any)
    df = df.dropna()

except FileNotFoundError:
    print("Error: Dataset file not found.")
except Exception as e:
    print(f"An error occurred: {e}")


# Task 2: Basic Data Analysis

# Compute basic statistics
print("\nBasic statistics:")
display(df.describe())

# Group by 'Class' (0 = Non-Fraud, 1 = Fraud) and compute mean of Amount
print("\nAverage transaction amount by Class:")
display(df.groupby('Class')['Amount'].mean())

# Quick finding
fraud_ratio = df['Class'].mean() * 100
print(f"\nInteresting finding: Only {fraud_ratio:.4f}% of transactions are fraudulent.")


# Task 3: Data Visualization

# 1. Line chart: Transaction Amount over Time (sampled for speed)
plt.figure(figsize=(10,5))
sample_df = df.sample(1000, random_state=42).sort_values("Time")
plt.plot(sample_df['Time'], sample_df['Amount'], color='blue')
plt.title('Transaction Amount Over Time (Sampled)')
plt.xlabel('Time (seconds)')
plt.ylabel('Amount')
plt.show()

# 2. Bar chart: Average amount by Class
plt.figure(figsize=(6,4))
sns.barplot(x='Class', y='Amount', data=df, palette='viridis')
plt.title('Average Transaction Amount by Class')
plt.xlabel('Class (0=Non-Fraud, 1=Fraud)')
plt.ylabel('Amount')
plt.show()

# 3. Histogram: Transaction Amount distribution
plt.figure(figsize=(8,5))
plt.hist(df['Amount'], bins=50, color='orange', edgecolor='black')
plt.title('Transaction Amount Distribution')
plt.xlabel('Amount')
plt.ylabel('Frequency')
plt.show()

# 4. Scatter plot: Amount vs Time (sampled for speed)
plt.figure(figsize=(8,5))
sns.scatterplot(x='Time', y='Amount', hue='Class', data=sample_df, palette='deep', alpha=0.7)
plt.title('Transaction Amount vs Time (Sampled)')
plt.xlabel('Time (seconds)')
plt.ylabel('Amount')
plt.legend(title='Class')
plt.show()